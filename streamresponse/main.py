# main.py - Backend FastAPI v·ªõi Gemini 2.0 Flash
# requirements.txt:
# fastapi
# uvicorn
# google-generativeai
# python-multipart
# pydantic

from fastapi import FastAPI, HTTPException
from fastapi.responses import StreamingResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from pydantic import BaseModel
from typing import List, Optional
import google.generativeai as genai
import json
import asyncio
import os
from datetime import datetime
import logging

# Setup logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Pydantic models
class ChatMessage(BaseModel):
    role: str  # 'user' ho·∫∑c 'assistant'
    content: str
    timestamp: Optional[datetime] = None

class ChatRequest(BaseModel):
    message: str
    history: Optional[List[ChatMessage]] = []
    model: Optional[str] = "gemini-2.0-flash-exp"
    temperature: Optional[float] = 0.7
    max_tokens: Optional[int] = 2048

class ChatResponse(BaseModel):
    response: str
    model: str
    timestamp: datetime

# FastAPI app
app = FastAPI(
    title="Gemini 2.0 Flash Chatbot API",
    description="API cho chatbot s·ª≠ d·ª•ng Gemini 2.0 Flash v·ªõi streaming response",
    version="1.0.0"
)

# CORS middleware - cho ph√©p frontend k·∫øt n·ªëi
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Trong production n√™n ch·ªâ ƒë·ªãnh c·ª• th·ªÉ domain
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files (ƒë·ªÉ serve HTML) - ch·ªâ mount n·∫øu th∆∞ m·ª•c t·ªìn t·∫°i
static_dir = "static"
if os.path.exists(static_dir) and os.path.isdir(static_dir):
    app.mount("/static", StaticFiles(directory=static_dir), name="static")
    logger.info("‚úÖ Static files mounted successfully")
else:
    logger.warning(f"‚ö†Ô∏è  Th∆∞ m·ª•c '{static_dir}' kh√¥ng t·ªìn t·∫°i. T·∫°o th∆∞ m·ª•c n√†y n·∫øu b·∫°n mu·ªën serve static files.")

# Kh·ªüi t·∫°o Gemini
GEMINI_API_KEY = 'AIzaSyDFUKW4QZ0WeQw5_Bz9kbinynstDL8ayL0'
if not GEMINI_API_KEY:
    logger.warning("‚ö†Ô∏è  GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c set. H√£y set trong environment variables.")
    logger.info("üí° C√°ch set: export GEMINI_API_KEY='your-api-key'")

if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)

class GeminiChatbot:
    def __init__(self):
        self.model_name = "gemini-2.0-flash"
        self.generation_config = {
            "temperature": 0.7,
            "top_p": 0.8,
            "top_k": 40,
            "max_output_tokens": 2048,
        }
        self.safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_MEDIUM_AND_ABOVE"
            }
        ]

    def get_model(self):
        """T·∫°o model Gemini v·ªõi c·∫•u h√¨nh"""
        return genai.GenerativeModel(
            model_name=self.model_name,
            generation_config=self.generation_config,
            safety_settings=self.safety_settings
        )

    async def stream_response(self, message: str, history: List[ChatMessage] = None):
        """Stream response t·ª´ Gemini v·ªõi hi·ªáu ·ª©ng ƒë√°nh m√°y nh∆∞ ChatGPT"""
        try:
            model = self.get_model()
            
            # Chuy·ªÉn ƒë·ªïi l·ªãch s·ª≠ h·ªôi tho·∫°i sang ƒë·ªãnh d·∫°ng Gemini
            gemini_history = []
            if history:
                for msg in history[-10:]:  # L·∫•y 10 tin nh·∫Øn g·∫ßn nh·∫•t
                    role = "user" if msg.role == "user" else "model"
                    gemini_history.append({
                        "role": role,
                        "parts": [{"text": msg.content}]
                    })

            # B·∫Øt ƒë·∫ßu phi√™n chat v·ªõi Gemini
            chat = model.start_chat(history=gemini_history)
            
            # G·ªçi API v·ªõi ch·∫ø ƒë·ªô stream
            response = await asyncio.to_thread(
                chat.send_message, 
                message, 
                stream=True
            )
            
            full_response = ""
            chunk_count = 0

            # Duy·ªát t·ª´ng chunk t·ª´ Gemini
            for chunk in response:
                if chunk.text:
                    for char in chunk.text:  # Stream t·ª´ng k√Ω t·ª±
                        full_response += char
                        chunk_count += 1

                        chunk_data = {
                            'type': 'chunk',
                            'content': char,
                            'full_content': full_response,
                            'chunk_id': chunk_count,
                            'timestamp': datetime.now().isoformat()
                        }

                        yield f"data: {json.dumps(chunk_data, ensure_ascii=False)}\n\n"
                        await asyncio.sleep(0.015)  # Delay ƒë·ªÉ m√¥ ph·ªèng hi·ªáu ·ª©ng g√µ ch·ªØ

            # G·ª≠i t√≠n hi·ªáu ho√†n t·∫•t
            done_data = {
                'type': 'done',
                'content': '',
                'full_content': full_response,
                'total_chunks': chunk_count,
                'timestamp': datetime.now().isoformat()
            }
            yield f"data: {json.dumps(done_data, ensure_ascii=False)}\n\n"

            logger.info(f"‚úÖ Stream completed: {chunk_count} chunks, {len(full_response)} chars")
        
        except Exception as e:
            logger.error(f"‚ùå Streaming error: {str(e)}")
            error_data = {
                'type': 'error',
                'error': f'L·ªói khi k·∫øt n·ªëi v·ªõi Gemini: {str(e)}',
                'timestamp': datetime.now().isoformat()
            }
            yield f"data: {json.dumps(error_data, ensure_ascii=False)}\n\n"

    async def get_response(self, message: str, history: List[ChatMessage] = None):
        """Non-streaming response (backup method)"""
        try:
            model = self.get_model()
            
            # Chuy·ªÉn ƒë·ªïi history
            gemini_history = []
            if history:
                for msg in history[-10]:
                    role = "user" if msg.role == "user" else "model"
                    gemini_history.append({
                        "role": role,
                        "parts": [{"text": msg.content}]
                    })

            chat = model.start_chat(history=gemini_history)
            response = await asyncio.to_thread(chat.send_message, message)
            
            return response.text
            
        except Exception as e:
            logger.error(f"‚ùå Response error: {str(e)}")
            raise HTTPException(status_code=500, detail=f"L·ªói Gemini API: {str(e)}")

# Kh·ªüi t·∫°o chatbot instance
chatbot = GeminiChatbot()

@app.get("/")
async def root():
    """Root endpoint - h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"""
    return {
        "message": "ü§ñ Gemini 2.0 Flash Chatbot API",
        "version": "1.0.0",
        "endpoints": {
            "stream_chat": "POST /api/chat/stream",
            "regular_chat": "POST /api/chat", 
            "health": "GET /api/health",
            "docs": "GET /docs"
        },
        "frontend": "/static/index.html",
        "status": "‚úÖ API ƒëang ho·∫°t ƒë·ªông"
    }

@app.post("/api/chat/stream")
async def stream_chat(request: ChatRequest):
    """
    Stream chat endpoint - tr·∫£ v·ªÅ response t·ª´ng chunk
    
    Request body:
    - message: Tin nh·∫Øn ng∆∞·ªùi d√πng
    - history: L·ªãch s·ª≠ chat (optional)
    - model: Model name (optional, default: gemini-2.0-flash-exp)
    - temperature: ƒê·ªô s√°ng t·∫°o 0-1 (optional, default: 0.7)
    """
    if not GEMINI_API_KEY:
        raise HTTPException(
            status_code=500, 
            detail="‚ùå GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng set environment variable."
        )
    
    logger.info(f"üöÄ Starting stream for message: {request.message[:50]}...")
    
    return StreamingResponse(
        chatbot.stream_response(request.message, request.history),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "Access-Control-Allow-Origin": "*",
            "X-Accel-Buffering": "no",  # T·∫Øt buffering cho nginx
        }
    )

@app.post("/api/chat", response_model=ChatResponse)
async def chat(request: ChatRequest):
    """
    Regular chat endpoint - tr·∫£ v·ªÅ response m·ªôt l·∫ßn
    """
    if not GEMINI_API_KEY:
        raise HTTPException(
            status_code=500, 
            detail="‚ùå GEMINI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"
        )
    
    logger.info(f"üí¨ Processing chat: {request.message[:50]}...")
    
    response = await chatbot.get_response(request.message, request.history)
    
    return ChatResponse(
        response=response,
        model=request.model or "gemini-2.0-flash-exp",
        timestamp=datetime.now()
    )

@app.get("/api/health")
async def health_check():
    """Health check endpoint"""
    return {
        "status": "healthy" if GEMINI_API_KEY else "warning",
        "timestamp": datetime.now().isoformat(),
        "model": "gemini-2.0-flash-exp",
        "api_configured": bool(GEMINI_API_KEY),
        "message": "‚úÖ API ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng" if GEMINI_API_KEY else "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh GEMINI_API_KEY"
    }

@app.get("/api/models")
async def get_available_models():
    """Danh s√°ch models c√≥ s·∫µn"""
    return {
        "available_models": [
            "gemini-2.0-flash-exp",
            "gemini-1.5-pro",
            "gemini-1.5-flash"
        ],
        "current_model": chatbot.model_name,
        "generation_config": chatbot.generation_config
    }

# Error handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request, exc):
    return {
        "error": True,
        "status_code": exc.status_code,
        "message": exc.detail,
        "timestamp": datetime.now().isoformat()
    }

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    logger.error(f"‚ùå Unhandled error: {str(exc)}")
    return {
        "error": True,
        "status_code": 500,
        "message": "ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën",
        "timestamp": datetime.now().isoformat()
    }

if __name__ == "__main__":
    import uvicorn
    
    print("\nüöÄ Starting Gemini Chatbot Server...")
    print("üìã Th√¥ng tin:")
    print(f"   ‚Ä¢ Model: {chatbot.model_name}")
    print(f"   ‚Ä¢ API Key: {'‚úÖ ƒê√£ c·∫•u h√¨nh' if GEMINI_API_KEY else '‚ùå Ch∆∞a c·∫•u h√¨nh'}")
    print(f"   ‚Ä¢ Server: http://localhost:8000")
    print(f"   ‚Ä¢ API Docs: http://localhost:8000/docs")
    print(f"   ‚Ä¢ Frontend: http://localhost:8000/static/index.html")
    print("\nüí° C√°ch set API key: export GEMINI_API_KEY='your-api-key'\n")
    
    uvicorn.run(
        "main:app", 
        host="0.0.0.0", 
        port=8000, 
        reload=True,
        log_level="info"
    )