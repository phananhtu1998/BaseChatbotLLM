import psycopg2
from psycopg2.extras import RealDictCursor

def setup_database():
    """Kh·ªüi t·∫°o database v·ªõi d·ªØ li·ªáu m·∫´u"""
    
    # C·∫•u h√¨nh k·∫øt n·ªëi - C·∫¨P NH·∫¨T THEO TH√îNG TIN C·ª¶A B·∫†N
    db_config = {
        'host': 'localhost',
        'database': 'db_test',  # T√™n database
        'user': 'admin',      # Username
        'password': '123',  # Password
        'port': 5432
    }
    
    # SQL script t·∫°o database
    sql_script = """
-- X√ìA B·∫¢NG N·∫æU T·ªíN T·∫†I
DROP TABLE IF EXISTS order_items, orders, customers, products, categories CASCADE;

-- B·∫¢NG DANH M·ª§C S·∫¢N PH·∫®M
CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT
);

-- B·∫¢NG S·∫¢N PH·∫®M
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    price NUMERIC(12, 0) NOT NULL,
    stock INTEGER NOT NULL,
    category_id INTEGER REFERENCES categories(id),
    description TEXT
);

-- B·∫¢NG KH√ÅCH H√ÄNG
CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE,
    phone TEXT
);

-- B·∫¢NG ƒê∆†N H√ÄNG
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    customer_id INTEGER REFERENCES customers(id),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount NUMERIC(12, 0),
    status TEXT CHECK (status IN ('pending', 'shipped', 'cancelled')) DEFAULT 'pending'
);

-- B·∫¢NG CHI TI·∫æT ƒê∆†N H√ÄNG
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INTEGER REFERENCES orders(id),
    product_id INTEGER REFERENCES products(id),
    quantity INTEGER NOT NULL,
    unit_price NUMERIC(12, 0) NOT NULL
);

-- D·ªÆ LI·ªÜU M·∫™U: DANH M·ª§C
INSERT INTO categories (name, description) VALUES
('ƒêi·ªán tho·∫°i', 'C√°c d√≤ng smartphone ph·ªï bi·∫øn'),
('Th·ªùi trang', 'Qu·∫ßn √°o, gi√†y d√©p, ph·ª• ki·ªán'),
('ƒê·ªì gia d·ª•ng', 'ƒê·ªì d√πng cho gia ƒë√¨nh'),
('Laptop', 'M√°y t√≠nh x√°ch tay c√°c lo·∫°i'),
('Ph·ª• ki·ªán', 'Ph·ª• ki·ªán ƒëi·ªán t·ª≠ v√† c√¥ng ngh·ªá');

-- D·ªÆ LI·ªÜU M·∫™U: S·∫¢N PH·∫®M
INSERT INTO products (name, price, stock, category_id, description) VALUES
('iPhone 15 Pro', 29990000, 20, 1, 'Smartphone cao c·∫•p c·ªßa Apple'),
('Samsung Galaxy S24', 24990000, 25, 1, 'Flagship Android m·ªõi nh·∫•t'),
('√Åo thun nam', 199000, 100, 2, '√Åo cotton ƒë∆°n gi·∫£n, nhi·ªÅu m√†u s·∫Øc'),
('Qu·∫ßn jean n·ªØ', 450000, 50, 2, 'Qu·∫ßn jean co gi√£n tho·∫£i m√°i'),
('M√°y h√∫t b·ª•i Xiaomi', 1500000, 15, 3, 'H√∫t b·ª•i c·∫ßm tay kh√¥ng d√¢y'),
('N·ªìi c∆°m ƒëi·ªán', 899000, 30, 3, 'N·ªìi c∆°m 1.8L cho 4-6 ng∆∞·ªùi'),
('MacBook Air M2', 28990000, 10, 4, 'Laptop Apple chip M2 m·ªõi nh·∫•t'),
('Dell XPS 13', 25990000, 8, 4, 'Laptop Windows cao c·∫•p'),
('Tai nghe AirPods Pro', 5990000, 40, 5, 'Tai nghe kh√¥ng d√¢y ch·ªëng ·ªìn'),
('Chu·ªôt wireless Logitech', 790000, 60, 5, 'Chu·ªôt kh√¥ng d√¢y gaming');

-- D·ªÆ LI·ªÜU M·∫™U: KH√ÅCH H√ÄNG
INSERT INTO customers (name, email, phone) VALUES
('Nguy·ªÖn VƒÉn A', 'nguyenvana@email.com', '0901234567'),
('Tr·∫ßn Th·ªã B', 'tranthib@email.com', '0912345678'),
('L√™ VƒÉn C', 'levanc@email.com', '0923456789'),
('Ph·∫°m Th·ªã D', 'phamthid@email.com', '0934567890'),
('Ho√†ng VƒÉn E', 'hoangvane@email.com', '0945678901');

-- D·ªÆ LI·ªÜU M·∫™U: ƒê∆†N H√ÄNG
INSERT INTO orders (customer_id, order_date, total_amount, status) VALUES
(1, '2024-06-01 10:30:00', 30189000, 'shipped'),
(2, '2024-06-02 14:00:00', 199000, 'pending'),
(3, '2024-06-03 16:20:00', 26790000, 'shipped'),
(1, '2024-06-04 09:15:00', 6789000, 'pending'),
(4, '2024-06-05 11:45:00', 1349000, 'shipped'),
(5, '2024-06-06 13:30:00', 29889000, 'pending'),
(2, '2024-06-07 15:10:00', 1649000, 'cancelled'),
(3, '2024-06-08 08:25:00', 450000, 'shipped');

-- D·ªÆ LI·ªÜU M·∫™U: CHI TI·∫æT ƒê∆†N H√ÄNG
INSERT INTO order_items (order_id, product_id, quantity, unit_price) VALUES
-- ƒê∆°n h√†ng 1: iPhone + √Åo thun
(1, 1, 1, 29990000),
(1, 3, 1, 199000),

-- ƒê∆°n h√†ng 2: √Åo thun
(2, 3, 1, 199000),

-- ƒê∆°n h√†ng 3: Samsung + Chu·ªôt
(3, 2, 1, 24990000),
(3, 10, 1, 790000),

-- ƒê∆°n h√†ng 4: AirPods + Chu·ªôt
(4, 9, 1, 5990000),
(4, 10, 1, 790000),

-- ƒê∆°n h√†ng 5: M√°y h√∫t b·ª•i + √Åo thun
(5, 5, 1, 1500000),
(5, 3, 1, 199000),

-- ƒê∆°n h√†ng 6: MacBook + Tai nghe
(6, 7, 1, 28990000),
(6, 9, 1, 5990000),

-- ƒê∆°n h√†ng 7: M√°y h√∫t b·ª•i + N·ªìi c∆°m (ƒë√£ h·ªßy)
(7, 5, 1, 1500000),
(7, 6, 1, 899000),

-- ƒê∆°n h√†ng 8: Qu·∫ßn jean
(8, 4, 1, 450000);
"""
    
    try:
        # K·∫øt n·ªëi database
        connection = psycopg2.connect(**db_config)
        cursor = connection.cursor()
        
        # Th·ª±c hi·ªán script
        cursor.execute(sql_script)
        connection.commit()
        
        print("‚úÖ Database ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p th√†nh c√¥ng!")
        print("üìä D·ªØ li·ªáu ƒë√£ t·∫°o:")
        print("   - 5 danh m·ª•c s·∫£n ph·∫©m")
        print("   - 10 s·∫£n ph·∫©m")
        print("   - 5 kh√°ch h√†ng")
        print("   - 8 ƒë∆°n h√†ng")
        print("   - 13 chi ti·∫øt ƒë∆°n h√†ng")
        
        # Ki·ªÉm tra d·ªØ li·ªáu
        cursor.execute("SELECT COUNT(*) FROM categories")
        categories_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM products")
        products_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM customers")
        customers_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM orders")
        orders_count = cursor.fetchone()[0]
        
        print(f"\nüìà Th·ªëng k√™:")
        print(f"   - Danh m·ª•c: {categories_count}")
        print(f"   - S·∫£n ph·∫©m: {products_count}")
        print(f"   - Kh√°ch h√†ng: {customers_count}")
        print(f"   - ƒê∆°n h√†ng: {orders_count}")
        
    except Exception as e:
        print(f"‚ùå L·ªói thi·∫øt l·∫≠p database: {e}")
        if connection:
            connection.rollback()
    finally:
        if cursor:
            cursor.close()
        if connection:
            connection.close()

if __name__ == "__main__":
    setup_database()